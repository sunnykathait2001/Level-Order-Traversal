#include <stdio.h>
#include <stdlib.h>

int front = -1;
int rear = -1;

struct node{
  int data;
  struct node *left;
  struct node *right;
};

struct node *createNode(int data){
  struct node *temp = (struct node *)malloc(sizeof(struct node));
  if(!temp){
    printf("Cannot allocate the required space..\n");
    return NULL;
  }
  temp->data = data;
  temp->left = NULL;
  temp->right = NULL;
  return temp;
}

void infixD(struct node *root){
  if(root){
    infixD(root->left);
    printf("%d ",root->data);
    infixD(root->right);
  }
}

// impelemention of queue to be used in level order traversal
struct node *Queue[100];

void enQueue(struct node *temp){
  if(rear == -1){
    Queue[++rear] = temp;
    front = rear;
  }else{
    Queue[++rear] = temp;
  }
}

int isEmpty(){
  return (rear == -1);
}

struct node *deQueue(){
  struct node *temp = Queue[front];
  if(rear == front){
    front = rear = -1;
    return temp;
  }else{
      front += 1;
  }
  return temp;
}

void levelOrder(struct node *root){
  struct node *temp;
  if(!root){
    return;
  }
  enQueue(root);
  while(!isEmpty()){
    temp = deQueue();
    printf("%d ",temp->data);
    if(temp->left){
      enQueue(temp->left);
    }
    if(temp->right){
      enQueue(temp->right);
    }
  }
}

int main(){
  struct node *root = createNode(1);
  struct node *child1 = createNode(2);
  struct node *child2 = createNode(3);
  struct node *anc1 = createNode(4);
  struct node *anc2 = createNode(5);
  struct node *anc3 = createNode(6);

  root->left = child1; root->right = child2;
  child1->left = anc1; child1->right = anc2;
  child2->left = anc3;

  // infixD(root);
  levelOrder(root);

  return 0;
}
